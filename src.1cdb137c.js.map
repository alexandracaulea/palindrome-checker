{"version":3,"sources":["../src/utils.js","../src/app.js","../src/index.js"],"names":["checkPalindrome","str","cleanStr","replace","toLowerCase","reversedStr","split","reverse","join","displayIcon","iconType","icons","Array","from","document","querySelectorAll","forEach","icon","classList","add","find","contains","remove","showInformation","inputValue","element","isValid","innerHTML","setAttribute","handleUserTyping","e","resultText","querySelector","target","value","initApp","addEventListener"],"mappings":";AAaO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,QAAA,qBAAA,EAbA,IAAMA,EAAkB,SAACC,GACxBC,IAAAA,EAAWD,EAAIE,QAAQ,SAAU,IAAIC,cACrCC,EAAcH,EAASI,MAAM,IAAIC,UAAUC,KAAK,IAC/CN,OAAAA,IAAaG,GAUf,QAAA,gBAAA,EAPP,IAAMI,EAAc,SAACC,GACbC,IAAAA,EAAQC,MAAMC,KAAKC,SAASC,iBAAiB,UACnDJ,EAAMK,QAAQ,SAACC,GAASA,OAAAA,EAAKC,UAAUC,IAAI,YAC1BR,EAAMS,KAAK,SAACH,GAASA,OAAAA,EAAKC,UAAUG,SAASX,KACrDQ,UAAUI,OAAO,WAGfC,EAAkB,SAACC,EAAYC,EAASC,GAC/CA,GACFD,EAAQP,UAAUC,IAAI,WACtBM,EAAQE,UAA2BH,eAAAA,OAAAA,EAAnC,oCACAC,EAAQG,aAAa,cAAe,SACpCnB,EAAY,kBAEZgB,EAAQP,UAAUC,IAAI,SACtBM,EAAQE,UAA2BH,eAAAA,OAAAA,EAAnC,wCACAf,EAAY,gBATT,QAAA,gBAAA;;ACgBA,aA7BP,IAAA,EAAA,QAAA,WAEMoB,EAAmB,SAACC,GAClBC,IAAAA,EAAajB,SAASkB,cAAc,WACpCR,EAAaM,EAAEG,OAAOC,MAET,KAAfV,GAKA,EAAgBA,EAAAA,iBAAAA,IACdO,EAAWb,UAAUG,SAAS,UAChCU,EAAWb,UAAUI,OAAO,UAEdE,EAAAA,EAAAA,iBAAAA,EAAYO,GAAY,KAEpCA,EAAWb,UAAUG,SAAS,YAChCU,EAAWb,UAAUI,OAAO,YAEdE,EAAAA,EAAAA,iBAAAA,EAAYO,GAAY,IAbxCA,EAAWJ,UAAY,IAiBrBQ,EAAU,WACKrB,SAASkB,cAAc,UAC/BI,iBAAiB,QAASP,IAGvCM;;AC7BA,aAAA,QAAA","file":"src.1cdb137c.js","sourceRoot":"..\\public","sourcesContent":["export const checkPalindrome = (str) => {\r\n  const cleanStr = str.replace(/[\\W_]/g, \"\").toLowerCase();\r\n  const reversedStr = cleanStr.split(\"\").reverse().join(\"\");\r\n  return cleanStr === reversedStr;\r\n};\r\n\r\nconst displayIcon = (iconType) => {\r\n  const icons = Array.from(document.querySelectorAll(\".icon\"));\r\n  icons.forEach((icon) => icon.classList.add(\"hidden\"));\r\n  const showIcon = icons.find((icon) => icon.classList.contains(iconType));\r\n  showIcon.classList.remove(\"hidden\");\r\n};\r\n\r\nexport const showInformation = (inputValue, element, isValid) => {\r\n  if (isValid) {\r\n    element.classList.add(\"success\");\r\n    element.innerHTML = `<strong><em>${inputValue}</em> it's a palindrome</strong>`;\r\n    element.setAttribute(\"aria-hidden\", \"false\");\r\n    displayIcon(\"success-icon\");\r\n  } else {\r\n    element.classList.add(\"error\");\r\n    element.innerHTML = `<strong><em>${inputValue}</em> it's not a palindrome</strong>`;\r\n    displayIcon(\"error-icon\");\r\n  }\r\n};\r\n","import { checkPalindrome, showInformation } from \"./utils\";\r\n\r\nconst handleUserTyping = (e) => {\r\n  const resultText = document.querySelector(\".result\");\r\n  const inputValue = e.target.value;\r\n\r\n  if (inputValue === \"\") {\r\n    resultText.innerHTML = \"\";\r\n    return;\r\n  }\r\n\r\n  if (checkPalindrome(inputValue)) {\r\n    if (resultText.classList.contains(\"error\")) {\r\n      resultText.classList.remove(\"error\");\r\n    }\r\n    showInformation(inputValue, resultText, true);\r\n  } else {\r\n    if (resultText.classList.contains(\"success\")) {\r\n      resultText.classList.remove(\"success\");\r\n    }\r\n    showInformation(inputValue, resultText, false);\r\n  }\r\n};\r\n\r\nconst initApp = () => {\r\n  const inputField = document.querySelector(\"#input\");\r\n  inputField.addEventListener(\"input\", handleUserTyping);\r\n};\r\n\r\ninitApp();\r\n","import \"./app\";\r\n"]}